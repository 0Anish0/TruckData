# Cursor Rules for Truck Data App

## TypeScript & Code Quality Rules

### 1. Type Safety
- **NEVER use `any` type anywhere in the codebase**
- Always use proper TypeScript types and interfaces
- Define explicit types for all function parameters, return values, and variables
- Use type assertions only when absolutely necessary and with proper type guards
- Import and use types from `src/types/index.ts` for consistency

### 2. Variable Management
- **NO unused variables, imports, or functions**
- Remove any unused imports immediately
- If a variable is declared but not used, either use it for its intended purpose or remove it
- Use ESLint rules to catch unused variables during development
- Clean up any dead code or commented-out code blocks

### 3. Theme & Styling
- **ALWAYS use global theme colors from `src/constants/theme.ts`**
- Never hardcode colors, spacing, or typography values inside component files
- Import theme values: `import { colors, spacing, typography } from '../constants/theme'`
- Use theme-based styling for consistency across the app
- Follow the established design system patterns

### 4. File Organization
- Keep types and interfaces in `src/types/index.ts`
- Don't create inline types within component files unless absolutely necessary
- Import shared types from the types directory
- Maintain clean separation between components, services, and utilities

### 5. Documentation & Files
- **DO NOT create README, .md, or documentation files unless explicitly requested**
- Don't generate unnecessary guide files or documentation
- Focus on clean, self-documenting code with proper naming conventions
- Only create files that are directly needed for functionality

### 6. Code Structure
- Use proper React patterns (hooks, functional components)
- Implement proper error handling with typed error objects
- Use consistent naming conventions (camelCase for variables, PascalCase for components)
- Follow the existing project structure and patterns

### 7. Import Management
- Use absolute imports where possible (configured in tsconfig.json)
- Group imports: React imports first, then third-party, then local imports
- Remove unused imports immediately
- Use named imports instead of default imports when possible

### 8. Component Guidelines
- Use TypeScript interfaces for all props
- Implement proper prop validation
- Use theme values for all styling
- Keep components focused and single-purpose
- Use proper React patterns (useState, useEffect, etc.)

## Examples

### ✅ Good:
```typescript
import React from 'react';
import { colors, spacing } from '../constants/theme';
import { Trip } from '../types';

interface TripCardProps {
  trip: Trip;
  onPress: (tripId: string) => void;
}

const TripCard: React.FC<TripCardProps> = ({ trip, onPress }) => {
  return (
    <View style={{ backgroundColor: colors.primary, padding: spacing.md }}>
      {/* component content */}
    </View>
  );
};
```

### ❌ Bad:
```typescript
import React from 'react';
import { any } from 'some-package'; // unused import

interface TripCardProps {
  trip: any; // using any type
  onPress: (tripId: any) => void; // using any type
}

const TripCard = ({ trip, onPress }) => { // no proper typing
  const unusedVariable = 'not used'; // unused variable
  
  return (
    <View style={{ backgroundColor: '#FF0000', padding: 16 }}> {/* hardcoded values */}
      {/* component content */}
    </View>
  );
};
```

## Enforcement
- These rules should be followed in all new code
- Existing code should be refactored to follow these rules when modified
- Use TypeScript strict mode and ESLint to enforce these practices
- Regular code reviews should check for compliance with these rules
